install.packages("diffr")
library diffr
library(diffr)
diffr(/Users/ramiro/Documents/GitHub/SchmuSchmi/tidydocs, /Users/ramiro/Documents/GitHub/SchmuSchmi/submission_Frontiers/resubmission/understanding_demonstratives_r2-DC5F)
diffr(Users/ramiro/Documents/GitHub/SchmuSchmi/tidydocs, Users/ramiro/Documents/GitHub/SchmuSchmi/submission_Frontiers/resubmission/understanding_demonstratives_r2-DC5F)
setwd("~/Documents/GitHub/SchmuSchmi")
diffr(tidydocs, submission_Frontiers/resubmission/understanding_demonstratives_r2-DC5F)
diffr(tidydocs/understanding-demonstratives_frontiers-revision_local.Rmd, submission_Frontiers/resubmission/understanding_demonstratives_r2-DC5F/understanding-demonstratives.Rmd)
diffr(understanding-demonstratives_frontiers-revision_local.Rmd, resubmission/understanding_demonstratives_r2-DC5F/understanding-demonstratives.Rmd)
setwd("~/Documents/GitHub/SchmuSchmi/submission_Frontiers/proofs and final/submission files")
diffr(understanding-demonstratives_frontiers-revision_local.Rmd,understanding-demonstratives.Rmd)
diffr(anonymous.Rmd,local.Rmd)
diffr(anonymous,local)
file1 = anonymous.Rmd
file1 = anonymous.Rmd
# Loading packages
# NOTE: this will install these packages on your machine in case they are missing
if (!require(papaja)) install.packages('papaja'); library(papaja)
if (!require(tidyverse)) install.packages('tidyverse'); library(tidyverse)
if (!require(stats)) install.packages('stats'); library(stats) # statistical analyses
if (!require(magick)) install.packages('magick'); library(magick) # for cropping plots
if (!require(ggsci)) install.packages('ggsci'); library(ggsci) # colour schemes for ggplot2
if (!require(rstatix)) install.packages('rstatix'); library(rstatix) # required for rounding pvalues
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
# read data
raw.data <- read.csv("./understanding-demonstratives-data.csv")
# prepare data - mutate to correct data type
test.data <- raw.data %>%
dplyr::filter(agecat != "teen") %>% # remove participants not matching age requirements
# rename sex
mutate(sex =   case_when(
sex == "female" ~ "female",
sex == "diverse" ~ "unknown",
TRUE ~ "male")) %>%
# rename method
mutate(method =   case_when(
method == "adultonline" ~ "online_website",
method == "blossin" ~ "in_person",
method == "zoom" ~ "online_call",
TRUE ~ "online_website")) %>%
# rename agecat and condition
mutate(agecat = recode(agecat,
"child" = "Child",
"adult" = "Adult"),
condition = recode(condition,
"complex labeling" = "Complex Labeling",
"demonstrative" = "Demonstrative",
"pseudo-word demonstrative" = "Pseudo-word Demonstrative")) %>%
# turn variables into factors for analyses
mutate(sex = as.factor(sex),
method = as.factor(method),
condition = as.factor(condition),
id = as.factor(id),
agecat = as.factor(agecat))%>%
# relevel factors for analyses
mutate(condition = relevel(condition, ref = "Complex Labeling"),
agecat = relevel(agecat, ref = "Adult"),
sex = relevel(sex, ref = "female")
)
str(test.data)
demographics_agecat_total <- test.data %>%
distinct(id, .keep_all = TRUE) %>% # select only one line per participant
group_by(agecat) %>%
summarize(
N = length(id),
female = sum(sex=="female"),
'M age' = round(mean(age), 2),
'Min age' = min(age),
'Max age' = max(age),
'SD age' = round(sd(age), 2)
)
# demographics_agecat_total$N[1] # adults
# demographics_agecat_total$N[2] # children
demographics_excluded <- raw.data %>%
distinct(id, .keep_all = TRUE) %>% # select only one line per participant
filter(agecat=="teen") %>% # exclude children that do not match age range
summarize(
N = length(id),
female = sum(sex=="female"),
'M age' = round(mean(age), 2),
'Min age' = min(age),
'Max age' = max(age),
'SD age' = round(sd(age), 2)
)
demographics_agecat_bycondition <- test.data %>%
distinct(id, .keep_all = TRUE) %>% # select only one line per participant
rename(Condition = condition,
Age = agecat) %>%
group_by(Age, Condition) %>%
dplyr::summarize(
N = length(id),
female = sum(sex=="female"),
'M age' = round(mean(age), 2),
'Min age' = min(age),
'Max age' = max(age),
'SD age' = round(sd(age), 2)
)
demographics_method <- raw.data %>%
distinct(id, .keep_all = TRUE) %>% # select only one line per participant
filter(agecat!="teen") %>% # exclude children that do not match age range
dplyr::summarize(
N = length(id),
'Online Call' = length(which(method=="zoom")),
'In Person' = length(which(method=="blossin")),
'Online Website' = length(which(method=="online")),
'Online Adults' = length(which(method=="adultonline"))
)
apa_table(
demographics_agecat_bycondition,
caption = "Demographics - Age Categories by Condition",
note = "The table shows per condition and age group the number of participants (N), the number of female participants (female), the mean age (M age), the minimum and maximum age (Min age and Max age), and the standard deviation of participants' age (SD age).",
escape = FALSE,
placement = "ht"
)
knitr::include_graphics("images/figure1_exp_setup.png", )
# aggregate proportion of correct choices and number of trials for each individual
overview.ind.test.data  <- test.data %>%
group_by(agecat, condition, id) %>%
arrange(agecat, condition) %>%
dplyr::summarise("correct" = mean(correct_all),
"trials" = max(trial))
overviewtestable <- overview.ind.test.data %>%
# filter(agecat!="teen") %>% # exclude children that do not match age range
rename(Condition = condition,
Age = agecat) %>%
group_by(Age, Condition) %>%
dplyr::summarise(N = n_distinct(id),
"trials/N" = round(sum(trials)/n_distinct(id), 2),
"M" = round(mean(correct)*100, 2),
"SD" = round(sd(correct)*100, 2)
)
apa_table(
overviewtestable,
caption = "Overview of Performance in Test Trials",
note = "The table provides the number of participants (N) for all experimental groups, as well as the percentage (M) and standard deviation (SD) of correct choices. Data for each child were averaged across trials.",
escape = TRUE, # if TRUE special Latex characters are escaped
placement = "ht", # position of table in page:  exact location (h), at the top (t), bottom (b)
font_size = "footnotesize"
)
plot.data <- test.data %>%
filter(agecat != "teen") %>% # exclude children that do not match age range
select(id, agecat, condition, correct_all) %>%
# mutate(agecat = recode(agecat,
#                        "child" = "Child",
#                        "adult" = "Adult"),
#        condition = recode(condition,
#                           "complex labeling" = "Complex Labeling",
#                           "demonstrative" = "Demonstrative",
#                           "pseudo-word demonstrative" = "Pseudo-word Demonstrative")) %>%
group_by(agecat, condition, id) %>%
dplyr::summarise(proportion.correct = round(mean(correct_all)*100, 2))
firstplot <- ggplot(plot.data, aes(x = condition, y = proportion.correct, colour = condition, fill = condition)) +
geom_violin(alpha = 0.3) +
geom_boxplot(alpha = 0.1) +
geom_hline(yintercept=50, linetype="dashed", color = "black") +
geom_jitter(height = 0.1, width = 0.2, size = 2, alpha = 1,) +
stat_summary(fun=mean, geom="point", shape=20, size=8) +
coord_cartesian(ylim = c(0, 100)) +
scale_color_npg() +
scale_fill_npg() +
theme_gray() +
theme(legend.position = "bottom") +
scale_y_continuous(name = "Proportion Correct") +
labs(x = "Condition",
y = "Proportion Correct",
title = "Proportion of participants' correct trials by condition and age group",
#caption = " "
) +
facet_wrap(~ agecat, ncol = 1)
# firstplot
ggsave("figure2_proportioncorrect.png", path = "./images", width = 9, height = 8, device='png', dpi=300)
knitr::include_graphics("images/figure2_proportioncorrect.png", )
# aggregate data
agg.data <- test.data %>%
group_by(id, agecat, condition) %>%
dplyr::summarise(correct = mean(correct_all))
# check aov and t-test assumptions
## outliers
agg.data.outl <- agg.data %>%
group_by(id, agecat, condition) %>%
dplyr::summarise(
outlier = is_outlier(correct),
extreme = is_extreme(correct))
agg.data.outl
### There are no extreme outliers.
## normality
norm.plot <- agg.data %>%
group_by(agecat)
ggplot(norm.plot, aes(x = correct, colour = condition)) +
geom_density(kernel = "gaussian") +
facet_grid(rows = vars(agecat))
### data are NOT normally distributed
# run Ordinal Logistic Regression?
## mutate agg.data$correct into ordered factor
# olr.agg.data <- test.data %>%
#   group_by(id, agecat, condition) %>%
#   dplyr::summarise(correct = mean(correct_all))%>%
#   mutate(correct = as.factor(correct),
#          correct = factor(correct, levels = c("0", "0.125", "0.25", "0.375", "0.5",  "0.625", "0.75", "0.875" , "1"), ordered = TRUE))
# ## check proportional odds assumption
# table(olr.agg.data$condition, olr.agg.data$correct)
# table(olr.agg.data$agecat, olr.agg.data$correct)
# table(olr.agg.data$condition, olr.agg.data$correct, olr.agg.data$agecat)
## Tables indicate that the model assumptions are not met, because there are many cells with "correct=0"
test.data.H1.labeling <- agg.data %>%
filter(condition=='Complex Labeling') %>%
group_by(agecat)
wilcox.test_H1_labeling <- wilcox.test(correct ~ agecat, data=test.data.H1.labeling, alternative = 'greater', conf.int=TRUE)
levels(test.data.H1.labeling$agecat)
test.data.H1.pseudodem <- agg.data %>%
filter(condition=='Pseudo-word Demonstrative') %>%
group_by(agecat)
wilcox.test_H1_pseudodem <- wilcox.test(correct ~ agecat, data=test.data.H1.pseudodem, alternative = 'greater', conf.int=TRUE)
test.data.H1.demonstrative <- agg.data %>%
filter(condition=='Demonstrative') %>%
group_by(agecat)
wilcox.test_H1_demonstrative <- wilcox.test(correct ~ agecat, data=test.data.H1.demonstrative, alternative = 'greater', conf.int=TRUE)
wilcox.test_H2 <- wilcox.test(
aggregate(data=test.data[test.data$agecat=="Child" & test.data$condition=="Demonstrative",], correct_all ~ date, mean)$correct_all,
aggregate(data=test.data[test.data$agecat=="Child" & test.data$condition=="Pseudo-word Demonstrative",], correct_all ~ date, mean)$correct_all,
alternative = 'greater')
test.data.H3.pseudodem <- agg.data %>%
filter((condition=='Pseudo-word Demonstrative' | condition=='Complex Labeling') & agecat=='Child') %>%
group_by(condition)
test.data.H3.pseudodem$condition <- droplevels(test.data.H3.pseudodem$condition)
wilcox.test_H3_pseudodem <- wilcox.test(correct ~ condition, data=test.data.H3.pseudodem, alternative = 'greater', conf.int=TRUE)
test.data.H3.demonstrative <- agg.data %>%
filter((condition=='Demonstrative' | condition=='Complex Labeling') & agecat=='Child') %>%
group_by(condition)
test.data.H3.demonstrative$condition <- droplevels(test.data.H3.demonstrative$condition)
wilcox.test_H3_demonstrative <-wilcox.test(correct ~ condition, data=test.data.H3.demonstrative, alternative = 'greater', conf.int=TRUE)
randomchoice.ind.test.data  <- test.data %>%
group_by(agecat, condition, id) %>%
arrange(agecat, condition) %>%
dplyr::summarise("correct_first" = mean(correct_first),
"correct_second" = mean(correct_second),
"correct_all" = mean(correct_all),
"trials" = max(trial))
randomchoice.responses  <- randomchoice.ind.test.data %>%
dplyr::rename(correct_trial = correct_all,
Condition = condition) %>%
pivot_longer(cols = c(correct_first, correct_second, correct_trial), names_to ="Response", values_to = "Correct") %>%
filter(agecat=="Child" & Response!="correct_trial") %>%
group_by(Condition, Response) %>%
arrange(Condition, Response) %>%
dplyr::summarise("N" = n_distinct(id),
"M" = round(mean(Correct)*100, 2),
"SD" = round(sd(Correct)*100, 2),
"p" = p_mark_significant(p_format(wilcox.test((Correct), alternative = 'two.sided', mu = 0.5)$p.value, digits =3, accuracy = 1e-03, leading.zero = FALSE), cutpoints = c(0, 0.00017, 0.0017, 0.0083, 1), symbols = c("***", "**", "*", ""))) %>%
ungroup()
randomchoice.responses
randomchoice.responses  <- randomchoice.ind.test.data %>%
dplyr::rename(correct_trial = correct_all,
Condition = condition) %>%
pivot_longer(cols = c(correct_first, correct_second, correct_trial), names_to ="Response", values_to = "Correct") %>%
filter(agecat=="Child" & Response!="correct_trial") %>%
group_by(Condition, Response) %>%
arrange(Condition, Response) %>%
dplyr::summarise("N" = n_distinct(id),
"M" = round(mean(Correct)*100, 2),
"SD" = round(sd(Correct)*100, 2),
"p" = p_mark_significant(p_format(wilcox.test((Correct), alternative = 'two.sided', mu = 0.5)$p.value, digits =3, accuracy = 1e-03, leading.zero = FALSE), cutpoints = c(0, 0.00017, 0.0017, 0.0083, 1), symbols = c("***", "**", "*", ""))) %>%
ungroup()
randomchoice.trials  <- randomchoice.ind.test.data %>%
dplyr::rename(correct_trial = correct_all,
Condition = condition) %>%
pivot_longer(cols = c(correct_first, correct_second, correct_trial), names_to ="Response", values_to = "Correct") %>%
filter(agecat=="Child" & Response=="correct_trial") %>%
group_by(Condition, Response) %>%
arrange(Condition, Response) %>%
dplyr::summarise("N" = n_distinct(id),
"M" = round(mean(Correct)*100, 2),
"SD" = round(sd(Correct)*100, 2),
"p" = p_mark_significant(p_format(wilcox.test((Correct), alternative = 'two.sided', mu = 0.25)$p.value, digits =3, accuracy = 1e-03, leading.zero = FALSE), cutpoints = c(0, 0.00033, 0.0033, 0.0167, 1), symbols = c("***", "**", "*", "")))%>%
ungroup()
df_list <- list(randomchoice.responses, randomchoice.trials)
randomchoice <- df_list %>%
reduce(full_join)
randomchoice.responses.nomark  <- randomchoice.ind.test.data %>%
dplyr::rename(correct_trial = correct_all) %>%
pivot_longer(cols = c(correct_first, correct_second, correct_trial), names_to ="response", values_to = "correct") %>%
filter(agecat=="Child" & response!="correct_trial") %>%
group_by(condition, response) %>%
arrange(condition, response) %>%
dplyr::summarise("N" = n_distinct(id),
"M" = round(mean(correct)*100, 2),
"SD" = round(sd(correct)*100, 2),
"p" = p_format(wilcox.test((correct), alternative = 'two.sided', mu = 0.5)$p.value, digits =3, accuracy = 1e-03, leading.zero = FALSE)) %>%
ungroup()
randomchoice.trials.nomark  <- randomchoice.ind.test.data %>%
dplyr::rename(correct_trial = correct_all) %>%
pivot_longer(cols = c(correct_first, correct_second, correct_trial), names_to ="response", values_to = "correct") %>%
filter(agecat=="Child" & response=="correct_trial") %>%
group_by(condition, response) %>%
arrange(condition, response) %>%
dplyr::summarise("N" = n_distinct(id),
"M" = round(mean(correct)*100, 2),
"SD" = round(sd(correct)*100, 2),
"p" = p_format(wilcox.test((correct), alternative = 'two.sided', mu = 0.25)$p.value, digits =3, accuracy = 1e-03, leading.zero = FALSE))%>%
ungroup()
df_list.nomark <- list(randomchoice.responses.nomark, randomchoice.trials.nomark)
randomchoice.nomark <- df_list.nomark %>%
reduce(full_join)
randomchoice.nomark
setwd("~/Documents/GitHub/understanding-demonstratives/glauer_etal_2024_understanding-demonstratives")
# Loading packages
# NOTE: this will install these packages on your machine in case they are missing
if (!require(papaja)) install.packages('papaja'); library(papaja)
if (!require(tidyverse)) install.packages('tidyverse'); library(tidyverse)
if (!require(stats)) install.packages('stats'); library(stats) # statistical analyses
if (!require(magick)) install.packages('magick'); library(magick) # for cropping plots
if (!require(ggsci)) install.packages('ggsci'); library(ggsci) # colour schemes for ggplot2
if (!require(rstatix)) install.packages('rstatix'); library(rstatix) # required for rounding pvalues
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
# read data
raw.data <- read.csv("./understanding-demonstratives-data.csv")
# prepare data - mutate to correct data type
test.data <- raw.data %>%
dplyr::filter(agecat != "teen") %>% # remove participants not matching age requirements
# rename sex
mutate(sex =   case_when(
sex == "female" ~ "female",
sex == "diverse" ~ "unknown",
TRUE ~ "male")) %>%
# rename method
mutate(method =   case_when(
method == "adultonline" ~ "online_website",
method == "blossin" ~ "in_person",
method == "zoom" ~ "online_call",
TRUE ~ "online_website")) %>%
# rename agecat and condition
mutate(agecat = recode(agecat,
"child" = "Child",
"adult" = "Adult"),
condition = recode(condition,
"complex labeling" = "Complex Labeling",
"demonstrative" = "Demonstrative",
"pseudo-word demonstrative" = "Pseudo-word Demonstrative")) %>%
# turn variables into factors for analyses
mutate(sex = as.factor(sex),
method = as.factor(method),
condition = as.factor(condition),
id = as.factor(id),
agecat = as.factor(agecat))%>%
# relevel factors for analyses
mutate(condition = relevel(condition, ref = "Complex Labeling"),
agecat = relevel(agecat, ref = "Adult"),
sex = relevel(sex, ref = "female")
)
str(test.data)
demographics_agecat_total <- test.data %>%
distinct(id, .keep_all = TRUE) %>% # select only one line per participant
group_by(agecat) %>%
summarize(
N = length(id),
female = sum(sex=="female"),
'M age' = round(mean(age), 2),
'Min age' = min(age),
'Max age' = max(age),
'SD age' = round(sd(age), 2)
)
# demographics_agecat_total$N[1] # adults
# demographics_agecat_total$N[2] # children
demographics_excluded <- raw.data %>%
distinct(id, .keep_all = TRUE) %>% # select only one line per participant
filter(agecat=="teen") %>% # exclude children that do not match age range
summarize(
N = length(id),
female = sum(sex=="female"),
'M age' = round(mean(age), 2),
'Min age' = min(age),
'Max age' = max(age),
'SD age' = round(sd(age), 2)
)
demographics_agecat_bycondition <- test.data %>%
distinct(id, .keep_all = TRUE) %>% # select only one line per participant
rename(Condition = condition,
Age = agecat) %>%
group_by(Age, Condition) %>%
dplyr::summarize(
N = length(id),
female = sum(sex=="female"),
'M age' = round(mean(age), 2),
'Min age' = min(age),
'Max age' = max(age),
'SD age' = round(sd(age), 2)
)
demographics_method <- raw.data %>%
distinct(id, .keep_all = TRUE) %>% # select only one line per participant
filter(agecat!="teen") %>% # exclude children that do not match age range
dplyr::summarize(
N = length(id),
'Online Call' = length(which(method=="zoom")),
'In Person' = length(which(method=="blossin")),
'Online Website' = length(which(method=="online")),
'Online Adults' = length(which(method=="adultonline"))
)
apa_table(
demographics_agecat_bycondition,
caption = "Demographics - Age Categories by Condition",
note = "The table shows per condition and age group the number of participants (N), the number of female participants (female), the mean age (M age), the minimum and maximum age (Min age and Max age), and the standard deviation of participants' age (SD age).",
escape = FALSE,
placement = "ht"
)
knitr::include_graphics("images/figure1_exp_setup.png", )
